// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: contact.proto

#ifndef PROTOBUF_INCLUDED_contact_2eproto
#define PROTOBUF_INCLUDED_contact_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_contact_2eproto 

namespace protobuf_contact_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_contact_2eproto
class Contact;
class ContactDefaultTypeInternal;
extern ContactDefaultTypeInternal _Contact_default_instance_;
namespace google {
namespace protobuf {
template<> ::Contact* Arena::CreateMaybeMessage<::Contact>(Arena*);
}  // namespace protobuf
}  // namespace google

// ===================================================================

class Contact : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Contact) */ {
 public:
  Contact();
  virtual ~Contact();

  Contact(const Contact& from);

  inline Contact& operator=(const Contact& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Contact(Contact&& from) noexcept
    : Contact() {
    *this = ::std::move(from);
  }

  inline Contact& operator=(Contact&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Contact& default_instance();

  enum ContactTypeCase {
    kEmail = 1,
    kPhone = 2,
    CONTACT_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Contact* internal_default_instance() {
    return reinterpret_cast<const Contact*>(
               &_Contact_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Contact* other);
  friend void swap(Contact& a, Contact& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Contact* New() const final {
    return CreateMaybeMessage<Contact>(NULL);
  }

  Contact* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Contact>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Contact& from);
  void MergeFrom(const Contact& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Contact* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string email = 1;
  private:
  bool has_email() const;
  public:
  void clear_email();
  static const int kEmailFieldNumber = 1;
  const ::std::string& email() const;
  void set_email(const ::std::string& value);
  #if LANG_CXX11
  void set_email(::std::string&& value);
  #endif
  void set_email(const char* value);
  void set_email(const char* value, size_t size);
  ::std::string* mutable_email();
  ::std::string* release_email();
  void set_allocated_email(::std::string* email);

  // string phone = 2;
  private:
  bool has_phone() const;
  public:
  void clear_phone();
  static const int kPhoneFieldNumber = 2;
  const ::std::string& phone() const;
  void set_phone(const ::std::string& value);
  #if LANG_CXX11
  void set_phone(::std::string&& value);
  #endif
  void set_phone(const char* value);
  void set_phone(const char* value, size_t size);
  ::std::string* mutable_phone();
  ::std::string* release_phone();
  void set_allocated_phone(::std::string* phone);

  void clear_contact_type();
  ContactTypeCase contact_type_case() const;
  // @@protoc_insertion_point(class_scope:Contact)
 private:
  void set_has_email();
  void set_has_phone();

  inline bool has_contact_type() const;
  inline void clear_has_contact_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ContactTypeUnion {
    ContactTypeUnion() {}
    ::google::protobuf::internal::ArenaStringPtr email_;
    ::google::protobuf::internal::ArenaStringPtr phone_;
  } contact_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_contact_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Contact

// string email = 1;
inline bool Contact::has_email() const {
  return contact_type_case() == kEmail;
}
inline void Contact::set_has_email() {
  _oneof_case_[0] = kEmail;
}
inline void Contact::clear_email() {
  if (has_email()) {
    contact_type_.email_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_contact_type();
  }
}
inline const ::std::string& Contact::email() const {
  // @@protoc_insertion_point(field_get:Contact.email)
  if (has_email()) {
    return contact_type_.email_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Contact::set_email(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Contact.email)
  if (!has_email()) {
    clear_contact_type();
    set_has_email();
    contact_type_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  contact_type_.email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Contact.email)
}
#if LANG_CXX11
inline void Contact::set_email(::std::string&& value) {
  // @@protoc_insertion_point(field_set:Contact.email)
  if (!has_email()) {
    clear_contact_type();
    set_has_email();
    contact_type_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  contact_type_.email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Contact.email)
}
#endif
inline void Contact::set_email(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_email()) {
    clear_contact_type();
    set_has_email();
    contact_type_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  contact_type_.email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Contact.email)
}
inline void Contact::set_email(const char* value, size_t size) {
  if (!has_email()) {
    clear_contact_type();
    set_has_email();
    contact_type_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  contact_type_.email_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Contact.email)
}
inline ::std::string* Contact::mutable_email() {
  if (!has_email()) {
    clear_contact_type();
    set_has_email();
    contact_type_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:Contact.email)
  return contact_type_.email_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact::release_email() {
  // @@protoc_insertion_point(field_release:Contact.email)
  if (has_email()) {
    clear_has_contact_type();
    return contact_type_.email_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Contact::set_allocated_email(::std::string* email) {
  if (!has_email()) {
    contact_type_.email_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_contact_type();
  if (email != NULL) {
    set_has_email();
    contact_type_.email_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), email);
  }
  // @@protoc_insertion_point(field_set_allocated:Contact.email)
}

// string phone = 2;
inline bool Contact::has_phone() const {
  return contact_type_case() == kPhone;
}
inline void Contact::set_has_phone() {
  _oneof_case_[0] = kPhone;
}
inline void Contact::clear_phone() {
  if (has_phone()) {
    contact_type_.phone_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_contact_type();
  }
}
inline const ::std::string& Contact::phone() const {
  // @@protoc_insertion_point(field_get:Contact.phone)
  if (has_phone()) {
    return contact_type_.phone_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void Contact::set_phone(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:Contact.phone)
  if (!has_phone()) {
    clear_contact_type();
    set_has_phone();
    contact_type_.phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  contact_type_.phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Contact.phone)
}
#if LANG_CXX11
inline void Contact::set_phone(::std::string&& value) {
  // @@protoc_insertion_point(field_set:Contact.phone)
  if (!has_phone()) {
    clear_contact_type();
    set_has_phone();
    contact_type_.phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  contact_type_.phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Contact.phone)
}
#endif
inline void Contact::set_phone(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_phone()) {
    clear_contact_type();
    set_has_phone();
    contact_type_.phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  contact_type_.phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Contact.phone)
}
inline void Contact::set_phone(const char* value, size_t size) {
  if (!has_phone()) {
    clear_contact_type();
    set_has_phone();
    contact_type_.phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  contact_type_.phone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Contact.phone)
}
inline ::std::string* Contact::mutable_phone() {
  if (!has_phone()) {
    clear_contact_type();
    set_has_phone();
    contact_type_.phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:Contact.phone)
  return contact_type_.phone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Contact::release_phone() {
  // @@protoc_insertion_point(field_release:Contact.phone)
  if (has_phone()) {
    clear_has_contact_type();
    return contact_type_.phone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void Contact::set_allocated_phone(::std::string* phone) {
  if (!has_phone()) {
    contact_type_.phone_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_contact_type();
  if (phone != NULL) {
    set_has_phone();
    contact_type_.phone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), phone);
  }
  // @@protoc_insertion_point(field_set_allocated:Contact.phone)
}

inline bool Contact::has_contact_type() const {
  return contact_type_case() != CONTACT_TYPE_NOT_SET;
}
inline void Contact::clear_has_contact_type() {
  _oneof_case_[0] = CONTACT_TYPE_NOT_SET;
}
inline Contact::ContactTypeCase Contact::contact_type_case() const {
  return Contact::ContactTypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_contact_2eproto
