// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: face.proto

#include "face.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace face {
PROTOBUF_CONSTEXPR FaceBox::FaceBox(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.score_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FaceBoxDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FaceBoxDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FaceBoxDefaultTypeInternal() {}
  union {
    FaceBox _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FaceBoxDefaultTypeInternal _FaceBox_default_instance_;
PROTOBUF_CONSTEXPR Point2D::Point2D(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.x_)*/0
  , /*decltype(_impl_.y_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct Point2DDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Point2DDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Point2DDefaultTypeInternal() {}
  union {
    Point2D _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Point2DDefaultTypeInternal _Point2D_default_instance_;
PROTOBUF_CONSTEXPR FaceKeypoints5::FaceKeypoints5(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.left_eye_)*/nullptr
  , /*decltype(_impl_.right_eye_)*/nullptr
  , /*decltype(_impl_.nose_tip_)*/nullptr
  , /*decltype(_impl_.mouth_left_)*/nullptr
  , /*decltype(_impl_.mouth_right_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FaceKeypoints5DefaultTypeInternal {
  PROTOBUF_CONSTEXPR FaceKeypoints5DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FaceKeypoints5DefaultTypeInternal() {}
  union {
    FaceKeypoints5 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FaceKeypoints5DefaultTypeInternal _FaceKeypoints5_default_instance_;
PROTOBUF_CONSTEXPR FaceKeypoints106::FaceKeypoints106(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.points_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FaceKeypoints106DefaultTypeInternal {
  PROTOBUF_CONSTEXPR FaceKeypoints106DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FaceKeypoints106DefaultTypeInternal() {}
  union {
    FaceKeypoints106 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FaceKeypoints106DefaultTypeInternal _FaceKeypoints106_default_instance_;
PROTOBUF_CONSTEXPR FacePose::FacePose(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.pitch_)*/0
  , /*decltype(_impl_.yaw_)*/0
  , /*decltype(_impl_.roll_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FacePoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FacePoseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FacePoseDefaultTypeInternal() {}
  union {
    FacePose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FacePoseDefaultTypeInternal _FacePose_default_instance_;
PROTOBUF_CONSTEXPR FaceAttributes::FaceAttributes(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.age_)*/0
  , /*decltype(_impl_.gender_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FaceAttributesDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FaceAttributesDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FaceAttributesDefaultTypeInternal() {}
  union {
    FaceAttributes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FaceAttributesDefaultTypeInternal _FaceAttributes_default_instance_;
PROTOBUF_CONSTEXPR FaceFeature::FaceFeature(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.vector_)*/{}
  , /*decltype(_impl_.model_version_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FaceFeatureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FaceFeatureDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FaceFeatureDefaultTypeInternal() {}
  union {
    FaceFeature _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FaceFeatureDefaultTypeInternal _FaceFeature_default_instance_;
PROTOBUF_CONSTEXPR FaceRecognitionResult::FaceRecognitionResult(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.face_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.similarity_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FaceRecognitionResultDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FaceRecognitionResultDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FaceRecognitionResultDefaultTypeInternal() {}
  union {
    FaceRecognitionResult _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FaceRecognitionResultDefaultTypeInternal _FaceRecognitionResult_default_instance_;
PROTOBUF_CONSTEXPR Face::Face(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.box_)*/nullptr
  , /*decltype(_impl_.keypoints5_)*/nullptr
  , /*decltype(_impl_.keypoints106_)*/nullptr
  , /*decltype(_impl_.pose_)*/nullptr
  , /*decltype(_impl_.attributes_)*/nullptr
  , /*decltype(_impl_.feature_)*/nullptr
  , /*decltype(_impl_.recognition_)*/nullptr
  , /*decltype(_impl_.timestamp_)*/int64_t{0}
  , /*decltype(_impl_.face_index_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FaceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FaceDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FaceDefaultTypeInternal() {}
  union {
    Face _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FaceDefaultTypeInternal _Face_default_instance_;
PROTOBUF_CONSTEXPR FaceRecord::FaceRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.face_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.person_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.face_image_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.feature_)*/nullptr
  , /*decltype(_impl_.create_time_)*/int64_t{0}
  , /*decltype(_impl_.update_time_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FaceRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FaceRecordDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FaceRecordDefaultTypeInternal() {}
  union {
    FaceRecord _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FaceRecordDefaultTypeInternal _FaceRecord_default_instance_;
PROTOBUF_CONSTEXPR FaceDetectionRequest::FaceDetectionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.image_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extract_keypoints5_)*/false
  , /*decltype(_impl_.extract_keypoints106_)*/false
  , /*decltype(_impl_.extract_attributes_)*/false
  , /*decltype(_impl_.extract_feature_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FaceDetectionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FaceDetectionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FaceDetectionRequestDefaultTypeInternal() {}
  union {
    FaceDetectionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FaceDetectionRequestDefaultTypeInternal _FaceDetectionRequest_default_instance_;
PROTOBUF_CONSTEXPR FaceDetectionResponse::FaceDetectionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.faces_)*/{}
  , /*decltype(_impl_.error_msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FaceDetectionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FaceDetectionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FaceDetectionResponseDefaultTypeInternal() {}
  union {
    FaceDetectionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FaceDetectionResponseDefaultTypeInternal _FaceDetectionResponse_default_instance_;
PROTOBUF_CONSTEXPR FaceRecognitionRequest::FaceRecognitionRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.feature_)*/nullptr
  , /*decltype(_impl_.top_n_)*/0
  , /*decltype(_impl_.threshold_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FaceRecognitionRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FaceRecognitionRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FaceRecognitionRequestDefaultTypeInternal() {}
  union {
    FaceRecognitionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FaceRecognitionRequestDefaultTypeInternal _FaceRecognitionRequest_default_instance_;
PROTOBUF_CONSTEXPR FaceRecognitionResponse::FaceRecognitionResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.results_)*/{}
  , /*decltype(_impl_.error_msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.error_code_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct FaceRecognitionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FaceRecognitionResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FaceRecognitionResponseDefaultTypeInternal() {}
  union {
    FaceRecognitionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FaceRecognitionResponseDefaultTypeInternal _FaceRecognitionResponse_default_instance_;
}  // namespace face
static ::_pb::Metadata file_level_metadata_face_2eproto[14];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_face_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_face_2eproto = nullptr;

const uint32_t TableStruct_face_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::face::FaceBox, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::face::FaceBox, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::face::FaceBox, _impl_.y_),
  PROTOBUF_FIELD_OFFSET(::face::FaceBox, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::face::FaceBox, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::face::FaceBox, _impl_.score_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::face::Point2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::face::Point2D, _impl_.x_),
  PROTOBUF_FIELD_OFFSET(::face::Point2D, _impl_.y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::face::FaceKeypoints5, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::face::FaceKeypoints5, _impl_.left_eye_),
  PROTOBUF_FIELD_OFFSET(::face::FaceKeypoints5, _impl_.right_eye_),
  PROTOBUF_FIELD_OFFSET(::face::FaceKeypoints5, _impl_.nose_tip_),
  PROTOBUF_FIELD_OFFSET(::face::FaceKeypoints5, _impl_.mouth_left_),
  PROTOBUF_FIELD_OFFSET(::face::FaceKeypoints5, _impl_.mouth_right_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::face::FaceKeypoints106, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::face::FaceKeypoints106, _impl_.points_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::face::FacePose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::face::FacePose, _impl_.pitch_),
  PROTOBUF_FIELD_OFFSET(::face::FacePose, _impl_.yaw_),
  PROTOBUF_FIELD_OFFSET(::face::FacePose, _impl_.roll_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::face::FaceAttributes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::face::FaceAttributes, _impl_.age_),
  PROTOBUF_FIELD_OFFSET(::face::FaceAttributes, _impl_.gender_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::face::FaceFeature, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::face::FaceFeature, _impl_.vector_),
  PROTOBUF_FIELD_OFFSET(::face::FaceFeature, _impl_.model_version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::face::FaceRecognitionResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::face::FaceRecognitionResult, _impl_.face_id_),
  PROTOBUF_FIELD_OFFSET(::face::FaceRecognitionResult, _impl_.similarity_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::face::Face, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::face::Face, _impl_.image_id_),
  PROTOBUF_FIELD_OFFSET(::face::Face, _impl_.face_index_),
  PROTOBUF_FIELD_OFFSET(::face::Face, _impl_.box_),
  PROTOBUF_FIELD_OFFSET(::face::Face, _impl_.keypoints5_),
  PROTOBUF_FIELD_OFFSET(::face::Face, _impl_.keypoints106_),
  PROTOBUF_FIELD_OFFSET(::face::Face, _impl_.pose_),
  PROTOBUF_FIELD_OFFSET(::face::Face, _impl_.attributes_),
  PROTOBUF_FIELD_OFFSET(::face::Face, _impl_.feature_),
  PROTOBUF_FIELD_OFFSET(::face::Face, _impl_.recognition_),
  PROTOBUF_FIELD_OFFSET(::face::Face, _impl_.timestamp_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::face::FaceRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::face::FaceRecord, _impl_.face_id_),
  PROTOBUF_FIELD_OFFSET(::face::FaceRecord, _impl_.person_id_),
  PROTOBUF_FIELD_OFFSET(::face::FaceRecord, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::face::FaceRecord, _impl_.feature_),
  PROTOBUF_FIELD_OFFSET(::face::FaceRecord, _impl_.face_image_),
  PROTOBUF_FIELD_OFFSET(::face::FaceRecord, _impl_.create_time_),
  PROTOBUF_FIELD_OFFSET(::face::FaceRecord, _impl_.update_time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::face::FaceDetectionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::face::FaceDetectionRequest, _impl_.image_),
  PROTOBUF_FIELD_OFFSET(::face::FaceDetectionRequest, _impl_.extract_keypoints5_),
  PROTOBUF_FIELD_OFFSET(::face::FaceDetectionRequest, _impl_.extract_keypoints106_),
  PROTOBUF_FIELD_OFFSET(::face::FaceDetectionRequest, _impl_.extract_attributes_),
  PROTOBUF_FIELD_OFFSET(::face::FaceDetectionRequest, _impl_.extract_feature_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::face::FaceDetectionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::face::FaceDetectionResponse, _impl_.faces_),
  PROTOBUF_FIELD_OFFSET(::face::FaceDetectionResponse, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::face::FaceDetectionResponse, _impl_.error_msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::face::FaceRecognitionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::face::FaceRecognitionRequest, _impl_.feature_),
  PROTOBUF_FIELD_OFFSET(::face::FaceRecognitionRequest, _impl_.top_n_),
  PROTOBUF_FIELD_OFFSET(::face::FaceRecognitionRequest, _impl_.threshold_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::face::FaceRecognitionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::face::FaceRecognitionResponse, _impl_.results_),
  PROTOBUF_FIELD_OFFSET(::face::FaceRecognitionResponse, _impl_.error_code_),
  PROTOBUF_FIELD_OFFSET(::face::FaceRecognitionResponse, _impl_.error_msg_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::face::FaceBox)},
  { 11, -1, -1, sizeof(::face::Point2D)},
  { 19, -1, -1, sizeof(::face::FaceKeypoints5)},
  { 30, -1, -1, sizeof(::face::FaceKeypoints106)},
  { 37, -1, -1, sizeof(::face::FacePose)},
  { 46, -1, -1, sizeof(::face::FaceAttributes)},
  { 54, -1, -1, sizeof(::face::FaceFeature)},
  { 62, -1, -1, sizeof(::face::FaceRecognitionResult)},
  { 70, -1, -1, sizeof(::face::Face)},
  { 86, -1, -1, sizeof(::face::FaceRecord)},
  { 99, -1, -1, sizeof(::face::FaceDetectionRequest)},
  { 110, -1, -1, sizeof(::face::FaceDetectionResponse)},
  { 119, -1, -1, sizeof(::face::FaceRecognitionRequest)},
  { 128, -1, -1, sizeof(::face::FaceRecognitionResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::face::_FaceBox_default_instance_._instance,
  &::face::_Point2D_default_instance_._instance,
  &::face::_FaceKeypoints5_default_instance_._instance,
  &::face::_FaceKeypoints106_default_instance_._instance,
  &::face::_FacePose_default_instance_._instance,
  &::face::_FaceAttributes_default_instance_._instance,
  &::face::_FaceFeature_default_instance_._instance,
  &::face::_FaceRecognitionResult_default_instance_._instance,
  &::face::_Face_default_instance_._instance,
  &::face::_FaceRecord_default_instance_._instance,
  &::face::_FaceDetectionRequest_default_instance_._instance,
  &::face::_FaceDetectionResponse_default_instance_._instance,
  &::face::_FaceRecognitionRequest_default_instance_._instance,
  &::face::_FaceRecognitionResponse_default_instance_._instance,
};

const char descriptor_table_protodef_face_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\nface.proto\022\004face\"M\n\007FaceBox\022\t\n\001x\030\001 \001(\002"
  "\022\t\n\001y\030\002 \001(\002\022\r\n\005width\030\003 \001(\002\022\016\n\006height\030\004 \001"
  "(\002\022\r\n\005score\030\005 \001(\002\"\037\n\007Point2D\022\t\n\001x\030\001 \001(\002\022"
  "\t\n\001y\030\002 \001(\002\"\273\001\n\016FaceKeypoints5\022\037\n\010left_ey"
  "e\030\001 \001(\0132\r.face.Point2D\022 \n\tright_eye\030\002 \001("
  "\0132\r.face.Point2D\022\037\n\010nose_tip\030\003 \001(\0132\r.fac"
  "e.Point2D\022!\n\nmouth_left\030\004 \001(\0132\r.face.Poi"
  "nt2D\022\"\n\013mouth_right\030\005 \001(\0132\r.face.Point2D"
  "\"1\n\020FaceKeypoints106\022\035\n\006points\030\001 \003(\0132\r.f"
  "ace.Point2D\"4\n\010FacePose\022\r\n\005pitch\030\001 \001(\002\022\013"
  "\n\003yaw\030\002 \001(\002\022\014\n\004roll\030\003 \001(\002\"w\n\016FaceAttribu"
  "tes\022\013\n\003age\030\001 \001(\002\022+\n\006gender\030\002 \001(\0162\033.face."
  "FaceAttributes.Gender\"+\n\006Gender\022\013\n\007UNKNO"
  "WN\020\000\022\010\n\004MALE\020\001\022\n\n\006FEMALE\020\002\"4\n\013FaceFeatur"
  "e\022\016\n\006vector\030\001 \003(\002\022\025\n\rmodel_version\030\002 \001(\t"
  "\"<\n\025FaceRecognitionResult\022\017\n\007face_id\030\001 \001"
  "(\t\022\022\n\nsimilarity\030\003 \001(\002\"\321\002\n\004Face\022\020\n\010image"
  "_id\030\001 \001(\t\022\022\n\nface_index\030\002 \001(\005\022\032\n\003box\030\003 \001"
  "(\0132\r.face.FaceBox\022(\n\nkeypoints5\030\004 \001(\0132\024."
  "face.FaceKeypoints5\022,\n\014keypoints106\030\005 \001("
  "\0132\026.face.FaceKeypoints106\022\034\n\004pose\030\006 \001(\0132"
  "\016.face.FacePose\022(\n\nattributes\030\007 \001(\0132\024.fa"
  "ce.FaceAttributes\022\"\n\007feature\030\010 \001(\0132\021.fac"
  "e.FaceFeature\0220\n\013recognition\030\t \001(\0132\033.fac"
  "e.FaceRecognitionResult\022\021\n\ttimestamp\030\n \001"
  "(\003\"\240\001\n\nFaceRecord\022\017\n\007face_id\030\001 \001(\t\022\021\n\tpe"
  "rson_id\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\"\n\007feature\030\004"
  " \001(\0132\021.face.FaceFeature\022\022\n\nface_image\030\005 "
  "\001(\014\022\023\n\013create_time\030\006 \001(\003\022\023\n\013update_time\030"
  "\007 \001(\003\"\224\001\n\024FaceDetectionRequest\022\r\n\005image\030"
  "\001 \001(\014\022\032\n\022extract_keypoints5\030\002 \001(\010\022\034\n\024ext"
  "ract_keypoints106\030\003 \001(\010\022\032\n\022extract_attri"
  "butes\030\004 \001(\010\022\027\n\017extract_feature\030\005 \001(\010\"Y\n\025"
  "FaceDetectionResponse\022\031\n\005faces\030\001 \003(\0132\n.f"
  "ace.Face\022\022\n\nerror_code\030\002 \001(\005\022\021\n\terror_ms"
  "g\030\003 \001(\t\"^\n\026FaceRecognitionRequest\022\"\n\007fea"
  "ture\030\001 \001(\0132\021.face.FaceFeature\022\r\n\005top_n\030\002"
  " \001(\005\022\021\n\tthreshold\030\003 \001(\002\"n\n\027FaceRecogniti"
  "onResponse\022,\n\007results\030\001 \003(\0132\033.face.FaceR"
  "ecognitionResult\022\022\n\nerror_code\030\002 \001(\005\022\021\n\t"
  "error_msg\030\003 \001(\t2\220\002\n\013FaceService\022G\n\nDetec"
  "tFace\022\032.face.FaceDetectionRequest\032\033.face"
  ".FaceDetectionResponse\"\000\022N\n\rRecognizeFac"
  "e\022\034.face.FaceRecognitionRequest\032\035.face.F"
  "aceRecognitionResponse\"\000\0224\n\014RegisterFace"
  "\022\020.face.FaceRecord\032\020.face.FaceRecord\"\000\0222"
  "\n\nDeleteFace\022\020.face.FaceRecord\032\020.face.Fa"
  "ceRecord\"\000b\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_face_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_face_2eproto = {
    false, false, 1898, descriptor_table_protodef_face_2eproto,
    "face.proto",
    &descriptor_table_face_2eproto_once, nullptr, 0, 14,
    schemas, file_default_instances, TableStruct_face_2eproto::offsets,
    file_level_metadata_face_2eproto, file_level_enum_descriptors_face_2eproto,
    file_level_service_descriptors_face_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_face_2eproto_getter() {
  return &descriptor_table_face_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_face_2eproto(&descriptor_table_face_2eproto);
namespace face {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* FaceAttributes_Gender_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_face_2eproto);
  return file_level_enum_descriptors_face_2eproto[0];
}
bool FaceAttributes_Gender_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr FaceAttributes_Gender FaceAttributes::UNKNOWN;
constexpr FaceAttributes_Gender FaceAttributes::MALE;
constexpr FaceAttributes_Gender FaceAttributes::FEMALE;
constexpr FaceAttributes_Gender FaceAttributes::Gender_MIN;
constexpr FaceAttributes_Gender FaceAttributes::Gender_MAX;
constexpr int FaceAttributes::Gender_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class FaceBox::_Internal {
 public:
};

FaceBox::FaceBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:face.FaceBox)
}
FaceBox::FaceBox(const FaceBox& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FaceBox* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.score_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.score_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.score_));
  // @@protoc_insertion_point(copy_constructor:face.FaceBox)
}

inline void FaceBox::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.score_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FaceBox::~FaceBox() {
  // @@protoc_insertion_point(destructor:face.FaceBox)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FaceBox::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FaceBox::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FaceBox::Clear() {
// @@protoc_insertion_point(message_clear_start:face.FaceBox)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.score_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.score_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceBox::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float width = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.width_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _impl_.height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float score = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 45)) {
          _impl_.score_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaceBox::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:face.FaceBox)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float width = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_width(), target);
  }

  // float height = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_height(), target);
  }

  // float score = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(5, this->_internal_score(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:face.FaceBox)
  return target;
}

size_t FaceBox::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:face.FaceBox)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  // float width = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = this->_internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    total_size += 1 + 4;
  }

  // float height = 4;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = this->_internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    total_size += 1 + 4;
  }

  // float score = 5;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = this->_internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaceBox::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FaceBox::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaceBox::GetClassData() const { return &_class_data_; }


void FaceBox::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FaceBox*>(&to_msg);
  auto& from = static_cast<const FaceBox&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:face.FaceBox)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_width = from._internal_width();
  uint32_t raw_width;
  memcpy(&raw_width, &tmp_width, sizeof(tmp_width));
  if (raw_width != 0) {
    _this->_internal_set_width(from._internal_width());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_height = from._internal_height();
  uint32_t raw_height;
  memcpy(&raw_height, &tmp_height, sizeof(tmp_height));
  if (raw_height != 0) {
    _this->_internal_set_height(from._internal_height());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_score = from._internal_score();
  uint32_t raw_score;
  memcpy(&raw_score, &tmp_score, sizeof(tmp_score));
  if (raw_score != 0) {
    _this->_internal_set_score(from._internal_score());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaceBox::CopyFrom(const FaceBox& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.FaceBox)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceBox::IsInitialized() const {
  return true;
}

void FaceBox::InternalSwap(FaceBox* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FaceBox, _impl_.score_)
      + sizeof(FaceBox::_impl_.score_)
      - PROTOBUF_FIELD_OFFSET(FaceBox, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceBox::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_face_2eproto_getter, &descriptor_table_face_2eproto_once,
      file_level_metadata_face_2eproto[0]);
}

// ===================================================================

class Point2D::_Internal {
 public:
};

Point2D::Point2D(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:face.Point2D)
}
Point2D::Point2D(const Point2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Point2D* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){}
    , decltype(_impl_.y_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.x_, &from._impl_.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.y_) -
    reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  // @@protoc_insertion_point(copy_constructor:face.Point2D)
}

inline void Point2D::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.x_){0}
    , decltype(_impl_.y_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

Point2D::~Point2D() {
  // @@protoc_insertion_point(destructor:face.Point2D)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Point2D::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point2D::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Point2D::Clear() {
// @@protoc_insertion_point(message_clear_start:face.Point2D)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.y_) -
      reinterpret_cast<char*>(&_impl_.x_)) + sizeof(_impl_.y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point2D::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point2D::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:face.Point2D)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:face.Point2D)
  return target;
}

size_t Point2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:face.Point2D)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = this->_internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = this->_internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point2D::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Point2D::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point2D::GetClassData() const { return &_class_data_; }


void Point2D::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Point2D*>(&to_msg);
  auto& from = static_cast<const Point2D&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:face.Point2D)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_x = from._internal_x();
  uint32_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _this->_internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_y = from._internal_y();
  uint32_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point2D::CopyFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2D::IsInitialized() const {
  return true;
}

void Point2D::InternalSwap(Point2D* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point2D, _impl_.y_)
      + sizeof(Point2D::_impl_.y_)
      - PROTOBUF_FIELD_OFFSET(Point2D, _impl_.x_)>(
          reinterpret_cast<char*>(&_impl_.x_),
          reinterpret_cast<char*>(&other->_impl_.x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point2D::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_face_2eproto_getter, &descriptor_table_face_2eproto_once,
      file_level_metadata_face_2eproto[1]);
}

// ===================================================================

class FaceKeypoints5::_Internal {
 public:
  static const ::face::Point2D& left_eye(const FaceKeypoints5* msg);
  static const ::face::Point2D& right_eye(const FaceKeypoints5* msg);
  static const ::face::Point2D& nose_tip(const FaceKeypoints5* msg);
  static const ::face::Point2D& mouth_left(const FaceKeypoints5* msg);
  static const ::face::Point2D& mouth_right(const FaceKeypoints5* msg);
};

const ::face::Point2D&
FaceKeypoints5::_Internal::left_eye(const FaceKeypoints5* msg) {
  return *msg->_impl_.left_eye_;
}
const ::face::Point2D&
FaceKeypoints5::_Internal::right_eye(const FaceKeypoints5* msg) {
  return *msg->_impl_.right_eye_;
}
const ::face::Point2D&
FaceKeypoints5::_Internal::nose_tip(const FaceKeypoints5* msg) {
  return *msg->_impl_.nose_tip_;
}
const ::face::Point2D&
FaceKeypoints5::_Internal::mouth_left(const FaceKeypoints5* msg) {
  return *msg->_impl_.mouth_left_;
}
const ::face::Point2D&
FaceKeypoints5::_Internal::mouth_right(const FaceKeypoints5* msg) {
  return *msg->_impl_.mouth_right_;
}
FaceKeypoints5::FaceKeypoints5(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:face.FaceKeypoints5)
}
FaceKeypoints5::FaceKeypoints5(const FaceKeypoints5& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FaceKeypoints5* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.left_eye_){nullptr}
    , decltype(_impl_.right_eye_){nullptr}
    , decltype(_impl_.nose_tip_){nullptr}
    , decltype(_impl_.mouth_left_){nullptr}
    , decltype(_impl_.mouth_right_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_left_eye()) {
    _this->_impl_.left_eye_ = new ::face::Point2D(*from._impl_.left_eye_);
  }
  if (from._internal_has_right_eye()) {
    _this->_impl_.right_eye_ = new ::face::Point2D(*from._impl_.right_eye_);
  }
  if (from._internal_has_nose_tip()) {
    _this->_impl_.nose_tip_ = new ::face::Point2D(*from._impl_.nose_tip_);
  }
  if (from._internal_has_mouth_left()) {
    _this->_impl_.mouth_left_ = new ::face::Point2D(*from._impl_.mouth_left_);
  }
  if (from._internal_has_mouth_right()) {
    _this->_impl_.mouth_right_ = new ::face::Point2D(*from._impl_.mouth_right_);
  }
  // @@protoc_insertion_point(copy_constructor:face.FaceKeypoints5)
}

inline void FaceKeypoints5::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.left_eye_){nullptr}
    , decltype(_impl_.right_eye_){nullptr}
    , decltype(_impl_.nose_tip_){nullptr}
    , decltype(_impl_.mouth_left_){nullptr}
    , decltype(_impl_.mouth_right_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FaceKeypoints5::~FaceKeypoints5() {
  // @@protoc_insertion_point(destructor:face.FaceKeypoints5)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FaceKeypoints5::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.left_eye_;
  if (this != internal_default_instance()) delete _impl_.right_eye_;
  if (this != internal_default_instance()) delete _impl_.nose_tip_;
  if (this != internal_default_instance()) delete _impl_.mouth_left_;
  if (this != internal_default_instance()) delete _impl_.mouth_right_;
}

void FaceKeypoints5::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FaceKeypoints5::Clear() {
// @@protoc_insertion_point(message_clear_start:face.FaceKeypoints5)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.left_eye_ != nullptr) {
    delete _impl_.left_eye_;
  }
  _impl_.left_eye_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.right_eye_ != nullptr) {
    delete _impl_.right_eye_;
  }
  _impl_.right_eye_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.nose_tip_ != nullptr) {
    delete _impl_.nose_tip_;
  }
  _impl_.nose_tip_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mouth_left_ != nullptr) {
    delete _impl_.mouth_left_;
  }
  _impl_.mouth_left_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.mouth_right_ != nullptr) {
    delete _impl_.mouth_right_;
  }
  _impl_.mouth_right_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceKeypoints5::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .face.Point2D left_eye = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_left_eye(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .face.Point2D right_eye = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_right_eye(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .face.Point2D nose_tip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_nose_tip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .face.Point2D mouth_left = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_mouth_left(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .face.Point2D mouth_right = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_mouth_right(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaceKeypoints5::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:face.FaceKeypoints5)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .face.Point2D left_eye = 1;
  if (this->_internal_has_left_eye()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::left_eye(this),
        _Internal::left_eye(this).GetCachedSize(), target, stream);
  }

  // .face.Point2D right_eye = 2;
  if (this->_internal_has_right_eye()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::right_eye(this),
        _Internal::right_eye(this).GetCachedSize(), target, stream);
  }

  // .face.Point2D nose_tip = 3;
  if (this->_internal_has_nose_tip()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::nose_tip(this),
        _Internal::nose_tip(this).GetCachedSize(), target, stream);
  }

  // .face.Point2D mouth_left = 4;
  if (this->_internal_has_mouth_left()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::mouth_left(this),
        _Internal::mouth_left(this).GetCachedSize(), target, stream);
  }

  // .face.Point2D mouth_right = 5;
  if (this->_internal_has_mouth_right()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::mouth_right(this),
        _Internal::mouth_right(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:face.FaceKeypoints5)
  return target;
}

size_t FaceKeypoints5::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:face.FaceKeypoints5)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .face.Point2D left_eye = 1;
  if (this->_internal_has_left_eye()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.left_eye_);
  }

  // .face.Point2D right_eye = 2;
  if (this->_internal_has_right_eye()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.right_eye_);
  }

  // .face.Point2D nose_tip = 3;
  if (this->_internal_has_nose_tip()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.nose_tip_);
  }

  // .face.Point2D mouth_left = 4;
  if (this->_internal_has_mouth_left()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mouth_left_);
  }

  // .face.Point2D mouth_right = 5;
  if (this->_internal_has_mouth_right()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.mouth_right_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaceKeypoints5::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FaceKeypoints5::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaceKeypoints5::GetClassData() const { return &_class_data_; }


void FaceKeypoints5::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FaceKeypoints5*>(&to_msg);
  auto& from = static_cast<const FaceKeypoints5&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:face.FaceKeypoints5)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_left_eye()) {
    _this->_internal_mutable_left_eye()->::face::Point2D::MergeFrom(
        from._internal_left_eye());
  }
  if (from._internal_has_right_eye()) {
    _this->_internal_mutable_right_eye()->::face::Point2D::MergeFrom(
        from._internal_right_eye());
  }
  if (from._internal_has_nose_tip()) {
    _this->_internal_mutable_nose_tip()->::face::Point2D::MergeFrom(
        from._internal_nose_tip());
  }
  if (from._internal_has_mouth_left()) {
    _this->_internal_mutable_mouth_left()->::face::Point2D::MergeFrom(
        from._internal_mouth_left());
  }
  if (from._internal_has_mouth_right()) {
    _this->_internal_mutable_mouth_right()->::face::Point2D::MergeFrom(
        from._internal_mouth_right());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaceKeypoints5::CopyFrom(const FaceKeypoints5& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.FaceKeypoints5)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceKeypoints5::IsInitialized() const {
  return true;
}

void FaceKeypoints5::InternalSwap(FaceKeypoints5* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FaceKeypoints5, _impl_.mouth_right_)
      + sizeof(FaceKeypoints5::_impl_.mouth_right_)
      - PROTOBUF_FIELD_OFFSET(FaceKeypoints5, _impl_.left_eye_)>(
          reinterpret_cast<char*>(&_impl_.left_eye_),
          reinterpret_cast<char*>(&other->_impl_.left_eye_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceKeypoints5::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_face_2eproto_getter, &descriptor_table_face_2eproto_once,
      file_level_metadata_face_2eproto[2]);
}

// ===================================================================

class FaceKeypoints106::_Internal {
 public:
};

FaceKeypoints106::FaceKeypoints106(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:face.FaceKeypoints106)
}
FaceKeypoints106::FaceKeypoints106(const FaceKeypoints106& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FaceKeypoints106* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){from._impl_.points_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:face.FaceKeypoints106)
}

inline void FaceKeypoints106::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.points_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FaceKeypoints106::~FaceKeypoints106() {
  // @@protoc_insertion_point(destructor:face.FaceKeypoints106)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FaceKeypoints106::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.points_.~RepeatedPtrField();
}

void FaceKeypoints106::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FaceKeypoints106::Clear() {
// @@protoc_insertion_point(message_clear_start:face.FaceKeypoints106)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.points_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceKeypoints106::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .face.Point2D points = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaceKeypoints106::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:face.FaceKeypoints106)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .face.Point2D points = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_points_size()); i < n; i++) {
    const auto& repfield = this->_internal_points(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:face.FaceKeypoints106)
  return target;
}

size_t FaceKeypoints106::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:face.FaceKeypoints106)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .face.Point2D points = 1;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->_impl_.points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaceKeypoints106::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FaceKeypoints106::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaceKeypoints106::GetClassData() const { return &_class_data_; }


void FaceKeypoints106::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FaceKeypoints106*>(&to_msg);
  auto& from = static_cast<const FaceKeypoints106&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:face.FaceKeypoints106)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.points_.MergeFrom(from._impl_.points_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaceKeypoints106::CopyFrom(const FaceKeypoints106& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.FaceKeypoints106)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceKeypoints106::IsInitialized() const {
  return true;
}

void FaceKeypoints106::InternalSwap(FaceKeypoints106* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.points_.InternalSwap(&other->_impl_.points_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceKeypoints106::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_face_2eproto_getter, &descriptor_table_face_2eproto_once,
      file_level_metadata_face_2eproto[3]);
}

// ===================================================================

class FacePose::_Internal {
 public:
};

FacePose::FacePose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:face.FacePose)
}
FacePose::FacePose(const FacePose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FacePose* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.pitch_){}
    , decltype(_impl_.yaw_){}
    , decltype(_impl_.roll_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.pitch_, &from._impl_.pitch_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.roll_) -
    reinterpret_cast<char*>(&_impl_.pitch_)) + sizeof(_impl_.roll_));
  // @@protoc_insertion_point(copy_constructor:face.FacePose)
}

inline void FacePose::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.pitch_){0}
    , decltype(_impl_.yaw_){0}
    , decltype(_impl_.roll_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FacePose::~FacePose() {
  // @@protoc_insertion_point(destructor:face.FacePose)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FacePose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FacePose::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FacePose::Clear() {
// @@protoc_insertion_point(message_clear_start:face.FacePose)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.pitch_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.roll_) -
      reinterpret_cast<char*>(&_impl_.pitch_)) + sizeof(_impl_.roll_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FacePose::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float pitch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.pitch_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float yaw = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _impl_.yaw_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // float roll = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.roll_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FacePose::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:face.FacePose)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float pitch = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_pitch(), target);
  }

  // float yaw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(2, this->_internal_yaw(), target);
  }

  // float roll = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_roll(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:face.FacePose)
  return target;
}

size_t FacePose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:face.FacePose)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float pitch = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = this->_internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    total_size += 1 + 4;
  }

  // float yaw = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = this->_internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    total_size += 1 + 4;
  }

  // float roll = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = this->_internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FacePose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FacePose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FacePose::GetClassData() const { return &_class_data_; }


void FacePose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FacePose*>(&to_msg);
  auto& from = static_cast<const FacePose&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:face.FacePose)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_pitch = from._internal_pitch();
  uint32_t raw_pitch;
  memcpy(&raw_pitch, &tmp_pitch, sizeof(tmp_pitch));
  if (raw_pitch != 0) {
    _this->_internal_set_pitch(from._internal_pitch());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_yaw = from._internal_yaw();
  uint32_t raw_yaw;
  memcpy(&raw_yaw, &tmp_yaw, sizeof(tmp_yaw));
  if (raw_yaw != 0) {
    _this->_internal_set_yaw(from._internal_yaw());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_roll = from._internal_roll();
  uint32_t raw_roll;
  memcpy(&raw_roll, &tmp_roll, sizeof(tmp_roll));
  if (raw_roll != 0) {
    _this->_internal_set_roll(from._internal_roll());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FacePose::CopyFrom(const FacePose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.FacePose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FacePose::IsInitialized() const {
  return true;
}

void FacePose::InternalSwap(FacePose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FacePose, _impl_.roll_)
      + sizeof(FacePose::_impl_.roll_)
      - PROTOBUF_FIELD_OFFSET(FacePose, _impl_.pitch_)>(
          reinterpret_cast<char*>(&_impl_.pitch_),
          reinterpret_cast<char*>(&other->_impl_.pitch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FacePose::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_face_2eproto_getter, &descriptor_table_face_2eproto_once,
      file_level_metadata_face_2eproto[4]);
}

// ===================================================================

class FaceAttributes::_Internal {
 public:
};

FaceAttributes::FaceAttributes(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:face.FaceAttributes)
}
FaceAttributes::FaceAttributes(const FaceAttributes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FaceAttributes* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.age_){}
    , decltype(_impl_.gender_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.age_, &from._impl_.age_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.gender_) -
    reinterpret_cast<char*>(&_impl_.age_)) + sizeof(_impl_.gender_));
  // @@protoc_insertion_point(copy_constructor:face.FaceAttributes)
}

inline void FaceAttributes::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.age_){0}
    , decltype(_impl_.gender_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FaceAttributes::~FaceAttributes() {
  // @@protoc_insertion_point(destructor:face.FaceAttributes)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FaceAttributes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FaceAttributes::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FaceAttributes::Clear() {
// @@protoc_insertion_point(message_clear_start:face.FaceAttributes)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.age_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.gender_) -
      reinterpret_cast<char*>(&_impl_.age_)) + sizeof(_impl_.gender_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceAttributes::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float age = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _impl_.age_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // .face.FaceAttributes.Gender gender = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_gender(static_cast<::face::FaceAttributes_Gender>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaceAttributes::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:face.FaceAttributes)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float age = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_age = this->_internal_age();
  uint32_t raw_age;
  memcpy(&raw_age, &tmp_age, sizeof(tmp_age));
  if (raw_age != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(1, this->_internal_age(), target);
  }

  // .face.FaceAttributes.Gender gender = 2;
  if (this->_internal_gender() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_gender(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:face.FaceAttributes)
  return target;
}

size_t FaceAttributes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:face.FaceAttributes)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float age = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_age = this->_internal_age();
  uint32_t raw_age;
  memcpy(&raw_age, &tmp_age, sizeof(tmp_age));
  if (raw_age != 0) {
    total_size += 1 + 4;
  }

  // .face.FaceAttributes.Gender gender = 2;
  if (this->_internal_gender() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_gender());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaceAttributes::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FaceAttributes::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaceAttributes::GetClassData() const { return &_class_data_; }


void FaceAttributes::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FaceAttributes*>(&to_msg);
  auto& from = static_cast<const FaceAttributes&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:face.FaceAttributes)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_age = from._internal_age();
  uint32_t raw_age;
  memcpy(&raw_age, &tmp_age, sizeof(tmp_age));
  if (raw_age != 0) {
    _this->_internal_set_age(from._internal_age());
  }
  if (from._internal_gender() != 0) {
    _this->_internal_set_gender(from._internal_gender());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaceAttributes::CopyFrom(const FaceAttributes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.FaceAttributes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceAttributes::IsInitialized() const {
  return true;
}

void FaceAttributes::InternalSwap(FaceAttributes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FaceAttributes, _impl_.gender_)
      + sizeof(FaceAttributes::_impl_.gender_)
      - PROTOBUF_FIELD_OFFSET(FaceAttributes, _impl_.age_)>(
          reinterpret_cast<char*>(&_impl_.age_),
          reinterpret_cast<char*>(&other->_impl_.age_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceAttributes::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_face_2eproto_getter, &descriptor_table_face_2eproto_once,
      file_level_metadata_face_2eproto[5]);
}

// ===================================================================

class FaceFeature::_Internal {
 public:
};

FaceFeature::FaceFeature(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:face.FaceFeature)
}
FaceFeature::FaceFeature(const FaceFeature& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FaceFeature* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.vector_){from._impl_.vector_}
    , decltype(_impl_.model_version_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.model_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_version().empty()) {
    _this->_impl_.model_version_.Set(from._internal_model_version(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:face.FaceFeature)
}

inline void FaceFeature::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.vector_){arena}
    , decltype(_impl_.model_version_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.model_version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.model_version_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FaceFeature::~FaceFeature() {
  // @@protoc_insertion_point(destructor:face.FaceFeature)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FaceFeature::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.vector_.~RepeatedField();
  _impl_.model_version_.Destroy();
}

void FaceFeature::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FaceFeature::Clear() {
// @@protoc_insertion_point(message_clear_start:face.FaceFeature)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.vector_.Clear();
  _impl_.model_version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceFeature::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated float vector = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_vector(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 13) {
          _internal_add_vector(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // string model_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "face.FaceFeature.model_version"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaceFeature::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:face.FaceFeature)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float vector = 1;
  if (this->_internal_vector_size() > 0) {
    target = stream->WriteFixedPacked(1, _internal_vector(), target);
  }

  // string model_version = 2;
  if (!this->_internal_model_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_version().data(), static_cast<int>(this->_internal_model_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "face.FaceFeature.model_version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:face.FaceFeature)
  return target;
}

size_t FaceFeature::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:face.FaceFeature)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float vector = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_vector_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string model_version = 2;
  if (!this->_internal_model_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaceFeature::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FaceFeature::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaceFeature::GetClassData() const { return &_class_data_; }


void FaceFeature::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FaceFeature*>(&to_msg);
  auto& from = static_cast<const FaceFeature&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:face.FaceFeature)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.vector_.MergeFrom(from._impl_.vector_);
  if (!from._internal_model_version().empty()) {
    _this->_internal_set_model_version(from._internal_model_version());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaceFeature::CopyFrom(const FaceFeature& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.FaceFeature)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceFeature::IsInitialized() const {
  return true;
}

void FaceFeature::InternalSwap(FaceFeature* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.vector_.InternalSwap(&other->_impl_.vector_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.model_version_, lhs_arena,
      &other->_impl_.model_version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceFeature::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_face_2eproto_getter, &descriptor_table_face_2eproto_once,
      file_level_metadata_face_2eproto[6]);
}

// ===================================================================

class FaceRecognitionResult::_Internal {
 public:
};

FaceRecognitionResult::FaceRecognitionResult(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:face.FaceRecognitionResult)
}
FaceRecognitionResult::FaceRecognitionResult(const FaceRecognitionResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FaceRecognitionResult* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.face_id_){}
    , decltype(_impl_.similarity_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.face_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.face_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_face_id().empty()) {
    _this->_impl_.face_id_.Set(from._internal_face_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.similarity_ = from._impl_.similarity_;
  // @@protoc_insertion_point(copy_constructor:face.FaceRecognitionResult)
}

inline void FaceRecognitionResult::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.face_id_){}
    , decltype(_impl_.similarity_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.face_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.face_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FaceRecognitionResult::~FaceRecognitionResult() {
  // @@protoc_insertion_point(destructor:face.FaceRecognitionResult)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FaceRecognitionResult::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.face_id_.Destroy();
}

void FaceRecognitionResult::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FaceRecognitionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:face.FaceRecognitionResult)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.face_id_.ClearToEmpty();
  _impl_.similarity_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceRecognitionResult::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string face_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_face_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "face.FaceRecognitionResult.face_id"));
        } else
          goto handle_unusual;
        continue;
      // float similarity = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.similarity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaceRecognitionResult::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:face.FaceRecognitionResult)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string face_id = 1;
  if (!this->_internal_face_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_face_id().data(), static_cast<int>(this->_internal_face_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "face.FaceRecognitionResult.face_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_face_id(), target);
  }

  // float similarity = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_similarity = this->_internal_similarity();
  uint32_t raw_similarity;
  memcpy(&raw_similarity, &tmp_similarity, sizeof(tmp_similarity));
  if (raw_similarity != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_similarity(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:face.FaceRecognitionResult)
  return target;
}

size_t FaceRecognitionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:face.FaceRecognitionResult)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string face_id = 1;
  if (!this->_internal_face_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_face_id());
  }

  // float similarity = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_similarity = this->_internal_similarity();
  uint32_t raw_similarity;
  memcpy(&raw_similarity, &tmp_similarity, sizeof(tmp_similarity));
  if (raw_similarity != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaceRecognitionResult::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FaceRecognitionResult::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaceRecognitionResult::GetClassData() const { return &_class_data_; }


void FaceRecognitionResult::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FaceRecognitionResult*>(&to_msg);
  auto& from = static_cast<const FaceRecognitionResult&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:face.FaceRecognitionResult)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_face_id().empty()) {
    _this->_internal_set_face_id(from._internal_face_id());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_similarity = from._internal_similarity();
  uint32_t raw_similarity;
  memcpy(&raw_similarity, &tmp_similarity, sizeof(tmp_similarity));
  if (raw_similarity != 0) {
    _this->_internal_set_similarity(from._internal_similarity());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaceRecognitionResult::CopyFrom(const FaceRecognitionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.FaceRecognitionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceRecognitionResult::IsInitialized() const {
  return true;
}

void FaceRecognitionResult::InternalSwap(FaceRecognitionResult* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.face_id_, lhs_arena,
      &other->_impl_.face_id_, rhs_arena
  );
  swap(_impl_.similarity_, other->_impl_.similarity_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceRecognitionResult::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_face_2eproto_getter, &descriptor_table_face_2eproto_once,
      file_level_metadata_face_2eproto[7]);
}

// ===================================================================

class Face::_Internal {
 public:
  static const ::face::FaceBox& box(const Face* msg);
  static const ::face::FaceKeypoints5& keypoints5(const Face* msg);
  static const ::face::FaceKeypoints106& keypoints106(const Face* msg);
  static const ::face::FacePose& pose(const Face* msg);
  static const ::face::FaceAttributes& attributes(const Face* msg);
  static const ::face::FaceFeature& feature(const Face* msg);
  static const ::face::FaceRecognitionResult& recognition(const Face* msg);
};

const ::face::FaceBox&
Face::_Internal::box(const Face* msg) {
  return *msg->_impl_.box_;
}
const ::face::FaceKeypoints5&
Face::_Internal::keypoints5(const Face* msg) {
  return *msg->_impl_.keypoints5_;
}
const ::face::FaceKeypoints106&
Face::_Internal::keypoints106(const Face* msg) {
  return *msg->_impl_.keypoints106_;
}
const ::face::FacePose&
Face::_Internal::pose(const Face* msg) {
  return *msg->_impl_.pose_;
}
const ::face::FaceAttributes&
Face::_Internal::attributes(const Face* msg) {
  return *msg->_impl_.attributes_;
}
const ::face::FaceFeature&
Face::_Internal::feature(const Face* msg) {
  return *msg->_impl_.feature_;
}
const ::face::FaceRecognitionResult&
Face::_Internal::recognition(const Face* msg) {
  return *msg->_impl_.recognition_;
}
Face::Face(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:face.Face)
}
Face::Face(const Face& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  Face* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_id_){}
    , decltype(_impl_.box_){nullptr}
    , decltype(_impl_.keypoints5_){nullptr}
    , decltype(_impl_.keypoints106_){nullptr}
    , decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.attributes_){nullptr}
    , decltype(_impl_.feature_){nullptr}
    , decltype(_impl_.recognition_){nullptr}
    , decltype(_impl_.timestamp_){}
    , decltype(_impl_.face_index_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.image_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image_id().empty()) {
    _this->_impl_.image_id_.Set(from._internal_image_id(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_box()) {
    _this->_impl_.box_ = new ::face::FaceBox(*from._impl_.box_);
  }
  if (from._internal_has_keypoints5()) {
    _this->_impl_.keypoints5_ = new ::face::FaceKeypoints5(*from._impl_.keypoints5_);
  }
  if (from._internal_has_keypoints106()) {
    _this->_impl_.keypoints106_ = new ::face::FaceKeypoints106(*from._impl_.keypoints106_);
  }
  if (from._internal_has_pose()) {
    _this->_impl_.pose_ = new ::face::FacePose(*from._impl_.pose_);
  }
  if (from._internal_has_attributes()) {
    _this->_impl_.attributes_ = new ::face::FaceAttributes(*from._impl_.attributes_);
  }
  if (from._internal_has_feature()) {
    _this->_impl_.feature_ = new ::face::FaceFeature(*from._impl_.feature_);
  }
  if (from._internal_has_recognition()) {
    _this->_impl_.recognition_ = new ::face::FaceRecognitionResult(*from._impl_.recognition_);
  }
  ::memcpy(&_impl_.timestamp_, &from._impl_.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.face_index_) -
    reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.face_index_));
  // @@protoc_insertion_point(copy_constructor:face.Face)
}

inline void Face::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_id_){}
    , decltype(_impl_.box_){nullptr}
    , decltype(_impl_.keypoints5_){nullptr}
    , decltype(_impl_.keypoints106_){nullptr}
    , decltype(_impl_.pose_){nullptr}
    , decltype(_impl_.attributes_){nullptr}
    , decltype(_impl_.feature_){nullptr}
    , decltype(_impl_.recognition_){nullptr}
    , decltype(_impl_.timestamp_){int64_t{0}}
    , decltype(_impl_.face_index_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.image_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Face::~Face() {
  // @@protoc_insertion_point(destructor:face.Face)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Face::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_id_.Destroy();
  if (this != internal_default_instance()) delete _impl_.box_;
  if (this != internal_default_instance()) delete _impl_.keypoints5_;
  if (this != internal_default_instance()) delete _impl_.keypoints106_;
  if (this != internal_default_instance()) delete _impl_.pose_;
  if (this != internal_default_instance()) delete _impl_.attributes_;
  if (this != internal_default_instance()) delete _impl_.feature_;
  if (this != internal_default_instance()) delete _impl_.recognition_;
}

void Face::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Face::Clear() {
// @@protoc_insertion_point(message_clear_start:face.Face)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.box_ != nullptr) {
    delete _impl_.box_;
  }
  _impl_.box_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.keypoints5_ != nullptr) {
    delete _impl_.keypoints5_;
  }
  _impl_.keypoints5_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.keypoints106_ != nullptr) {
    delete _impl_.keypoints106_;
  }
  _impl_.keypoints106_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.pose_ != nullptr) {
    delete _impl_.pose_;
  }
  _impl_.pose_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.attributes_ != nullptr) {
    delete _impl_.attributes_;
  }
  _impl_.attributes_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.feature_ != nullptr) {
    delete _impl_.feature_;
  }
  _impl_.feature_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.recognition_ != nullptr) {
    delete _impl_.recognition_;
  }
  _impl_.recognition_ = nullptr;
  ::memset(&_impl_.timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.face_index_) -
      reinterpret_cast<char*>(&_impl_.timestamp_)) + sizeof(_impl_.face_index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Face::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string image_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_image_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "face.Face.image_id"));
        } else
          goto handle_unusual;
        continue;
      // int32 face_index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.face_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .face.FaceBox box = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .face.FaceKeypoints5 keypoints5 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_keypoints5(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .face.FaceKeypoints106 keypoints106 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_keypoints106(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .face.FacePose pose = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .face.FaceAttributes attributes = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_attributes(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .face.FaceFeature feature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .face.FaceRecognitionResult recognition = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_recognition(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 timestamp = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          _impl_.timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Face::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:face.Face)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string image_id = 1;
  if (!this->_internal_image_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_id().data(), static_cast<int>(this->_internal_image_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "face.Face.image_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_image_id(), target);
  }

  // int32 face_index = 2;
  if (this->_internal_face_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_face_index(), target);
  }

  // .face.FaceBox box = 3;
  if (this->_internal_has_box()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::box(this),
        _Internal::box(this).GetCachedSize(), target, stream);
  }

  // .face.FaceKeypoints5 keypoints5 = 4;
  if (this->_internal_has_keypoints5()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::keypoints5(this),
        _Internal::keypoints5(this).GetCachedSize(), target, stream);
  }

  // .face.FaceKeypoints106 keypoints106 = 5;
  if (this->_internal_has_keypoints106()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::keypoints106(this),
        _Internal::keypoints106(this).GetCachedSize(), target, stream);
  }

  // .face.FacePose pose = 6;
  if (this->_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  // .face.FaceAttributes attributes = 7;
  if (this->_internal_has_attributes()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::attributes(this),
        _Internal::attributes(this).GetCachedSize(), target, stream);
  }

  // .face.FaceFeature feature = 8;
  if (this->_internal_has_feature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::feature(this),
        _Internal::feature(this).GetCachedSize(), target, stream);
  }

  // .face.FaceRecognitionResult recognition = 9;
  if (this->_internal_has_recognition()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::recognition(this),
        _Internal::recognition(this).GetCachedSize(), target, stream);
  }

  // int64 timestamp = 10;
  if (this->_internal_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(10, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:face.Face)
  return target;
}

size_t Face::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:face.Face)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string image_id = 1;
  if (!this->_internal_image_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_id());
  }

  // .face.FaceBox box = 3;
  if (this->_internal_has_box()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.box_);
  }

  // .face.FaceKeypoints5 keypoints5 = 4;
  if (this->_internal_has_keypoints5()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.keypoints5_);
  }

  // .face.FaceKeypoints106 keypoints106 = 5;
  if (this->_internal_has_keypoints106()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.keypoints106_);
  }

  // .face.FacePose pose = 6;
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.pose_);
  }

  // .face.FaceAttributes attributes = 7;
  if (this->_internal_has_attributes()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.attributes_);
  }

  // .face.FaceFeature feature = 8;
  if (this->_internal_has_feature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.feature_);
  }

  // .face.FaceRecognitionResult recognition = 9;
  if (this->_internal_has_recognition()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.recognition_);
  }

  // int64 timestamp = 10;
  if (this->_internal_timestamp() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_timestamp());
  }

  // int32 face_index = 2;
  if (this->_internal_face_index() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_face_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Face::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    Face::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Face::GetClassData() const { return &_class_data_; }


void Face::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<Face*>(&to_msg);
  auto& from = static_cast<const Face&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:face.Face)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image_id().empty()) {
    _this->_internal_set_image_id(from._internal_image_id());
  }
  if (from._internal_has_box()) {
    _this->_internal_mutable_box()->::face::FaceBox::MergeFrom(
        from._internal_box());
  }
  if (from._internal_has_keypoints5()) {
    _this->_internal_mutable_keypoints5()->::face::FaceKeypoints5::MergeFrom(
        from._internal_keypoints5());
  }
  if (from._internal_has_keypoints106()) {
    _this->_internal_mutable_keypoints106()->::face::FaceKeypoints106::MergeFrom(
        from._internal_keypoints106());
  }
  if (from._internal_has_pose()) {
    _this->_internal_mutable_pose()->::face::FacePose::MergeFrom(
        from._internal_pose());
  }
  if (from._internal_has_attributes()) {
    _this->_internal_mutable_attributes()->::face::FaceAttributes::MergeFrom(
        from._internal_attributes());
  }
  if (from._internal_has_feature()) {
    _this->_internal_mutable_feature()->::face::FaceFeature::MergeFrom(
        from._internal_feature());
  }
  if (from._internal_has_recognition()) {
    _this->_internal_mutable_recognition()->::face::FaceRecognitionResult::MergeFrom(
        from._internal_recognition());
  }
  if (from._internal_timestamp() != 0) {
    _this->_internal_set_timestamp(from._internal_timestamp());
  }
  if (from._internal_face_index() != 0) {
    _this->_internal_set_face_index(from._internal_face_index());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Face::CopyFrom(const Face& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.Face)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Face::IsInitialized() const {
  return true;
}

void Face::InternalSwap(Face* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_id_, lhs_arena,
      &other->_impl_.image_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Face, _impl_.face_index_)
      + sizeof(Face::_impl_.face_index_)
      - PROTOBUF_FIELD_OFFSET(Face, _impl_.box_)>(
          reinterpret_cast<char*>(&_impl_.box_),
          reinterpret_cast<char*>(&other->_impl_.box_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Face::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_face_2eproto_getter, &descriptor_table_face_2eproto_once,
      file_level_metadata_face_2eproto[8]);
}

// ===================================================================

class FaceRecord::_Internal {
 public:
  static const ::face::FaceFeature& feature(const FaceRecord* msg);
};

const ::face::FaceFeature&
FaceRecord::_Internal::feature(const FaceRecord* msg) {
  return *msg->_impl_.feature_;
}
FaceRecord::FaceRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:face.FaceRecord)
}
FaceRecord::FaceRecord(const FaceRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FaceRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.face_id_){}
    , decltype(_impl_.person_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.face_image_){}
    , decltype(_impl_.feature_){nullptr}
    , decltype(_impl_.create_time_){}
    , decltype(_impl_.update_time_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.face_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.face_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_face_id().empty()) {
    _this->_impl_.face_id_.Set(from._internal_face_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.person_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.person_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_person_id().empty()) {
    _this->_impl_.person_id_.Set(from._internal_person_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _impl_.face_image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.face_image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_face_image().empty()) {
    _this->_impl_.face_image_.Set(from._internal_face_image(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_feature()) {
    _this->_impl_.feature_ = new ::face::FaceFeature(*from._impl_.feature_);
  }
  ::memcpy(&_impl_.create_time_, &from._impl_.create_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.update_time_) -
    reinterpret_cast<char*>(&_impl_.create_time_)) + sizeof(_impl_.update_time_));
  // @@protoc_insertion_point(copy_constructor:face.FaceRecord)
}

inline void FaceRecord::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.face_id_){}
    , decltype(_impl_.person_id_){}
    , decltype(_impl_.name_){}
    , decltype(_impl_.face_image_){}
    , decltype(_impl_.feature_){nullptr}
    , decltype(_impl_.create_time_){int64_t{0}}
    , decltype(_impl_.update_time_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.face_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.face_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.person_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.person_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.face_image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.face_image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FaceRecord::~FaceRecord() {
  // @@protoc_insertion_point(destructor:face.FaceRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FaceRecord::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.face_id_.Destroy();
  _impl_.person_id_.Destroy();
  _impl_.name_.Destroy();
  _impl_.face_image_.Destroy();
  if (this != internal_default_instance()) delete _impl_.feature_;
}

void FaceRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FaceRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:face.FaceRecord)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.face_id_.ClearToEmpty();
  _impl_.person_id_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.face_image_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.feature_ != nullptr) {
    delete _impl_.feature_;
  }
  _impl_.feature_ = nullptr;
  ::memset(&_impl_.create_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.update_time_) -
      reinterpret_cast<char*>(&_impl_.create_time_)) + sizeof(_impl_.update_time_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string face_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_face_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "face.FaceRecord.face_id"));
        } else
          goto handle_unusual;
        continue;
      // string person_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_person_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "face.FaceRecord.person_id"));
        } else
          goto handle_unusual;
        continue;
      // string name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "face.FaceRecord.name"));
        } else
          goto handle_unusual;
        continue;
      // .face.FaceFeature feature = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes face_image = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_face_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 create_time = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.create_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 update_time = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.update_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaceRecord::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:face.FaceRecord)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string face_id = 1;
  if (!this->_internal_face_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_face_id().data(), static_cast<int>(this->_internal_face_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "face.FaceRecord.face_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_face_id(), target);
  }

  // string person_id = 2;
  if (!this->_internal_person_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_person_id().data(), static_cast<int>(this->_internal_person_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "face.FaceRecord.person_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_person_id(), target);
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "face.FaceRecord.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // .face.FaceFeature feature = 4;
  if (this->_internal_has_feature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::feature(this),
        _Internal::feature(this).GetCachedSize(), target, stream);
  }

  // bytes face_image = 5;
  if (!this->_internal_face_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_face_image(), target);
  }

  // int64 create_time = 6;
  if (this->_internal_create_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(6, this->_internal_create_time(), target);
  }

  // int64 update_time = 7;
  if (this->_internal_update_time() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(7, this->_internal_update_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:face.FaceRecord)
  return target;
}

size_t FaceRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:face.FaceRecord)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string face_id = 1;
  if (!this->_internal_face_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_face_id());
  }

  // string person_id = 2;
  if (!this->_internal_person_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_person_id());
  }

  // string name = 3;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // bytes face_image = 5;
  if (!this->_internal_face_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_face_image());
  }

  // .face.FaceFeature feature = 4;
  if (this->_internal_has_feature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.feature_);
  }

  // int64 create_time = 6;
  if (this->_internal_create_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_create_time());
  }

  // int64 update_time = 7;
  if (this->_internal_update_time() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_update_time());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaceRecord::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FaceRecord::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaceRecord::GetClassData() const { return &_class_data_; }


void FaceRecord::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FaceRecord*>(&to_msg);
  auto& from = static_cast<const FaceRecord&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:face.FaceRecord)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_face_id().empty()) {
    _this->_internal_set_face_id(from._internal_face_id());
  }
  if (!from._internal_person_id().empty()) {
    _this->_internal_set_person_id(from._internal_person_id());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_face_image().empty()) {
    _this->_internal_set_face_image(from._internal_face_image());
  }
  if (from._internal_has_feature()) {
    _this->_internal_mutable_feature()->::face::FaceFeature::MergeFrom(
        from._internal_feature());
  }
  if (from._internal_create_time() != 0) {
    _this->_internal_set_create_time(from._internal_create_time());
  }
  if (from._internal_update_time() != 0) {
    _this->_internal_set_update_time(from._internal_update_time());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaceRecord::CopyFrom(const FaceRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.FaceRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceRecord::IsInitialized() const {
  return true;
}

void FaceRecord::InternalSwap(FaceRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.face_id_, lhs_arena,
      &other->_impl_.face_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.person_id_, lhs_arena,
      &other->_impl_.person_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.face_image_, lhs_arena,
      &other->_impl_.face_image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FaceRecord, _impl_.update_time_)
      + sizeof(FaceRecord::_impl_.update_time_)
      - PROTOBUF_FIELD_OFFSET(FaceRecord, _impl_.feature_)>(
          reinterpret_cast<char*>(&_impl_.feature_),
          reinterpret_cast<char*>(&other->_impl_.feature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceRecord::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_face_2eproto_getter, &descriptor_table_face_2eproto_once,
      file_level_metadata_face_2eproto[9]);
}

// ===================================================================

class FaceDetectionRequest::_Internal {
 public:
};

FaceDetectionRequest::FaceDetectionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:face.FaceDetectionRequest)
}
FaceDetectionRequest::FaceDetectionRequest(const FaceDetectionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FaceDetectionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){}
    , decltype(_impl_.extract_keypoints5_){}
    , decltype(_impl_.extract_keypoints106_){}
    , decltype(_impl_.extract_attributes_){}
    , decltype(_impl_.extract_feature_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    _this->_impl_.image_.Set(from._internal_image(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.extract_keypoints5_, &from._impl_.extract_keypoints5_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.extract_feature_) -
    reinterpret_cast<char*>(&_impl_.extract_keypoints5_)) + sizeof(_impl_.extract_feature_));
  // @@protoc_insertion_point(copy_constructor:face.FaceDetectionRequest)
}

inline void FaceDetectionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.image_){}
    , decltype(_impl_.extract_keypoints5_){false}
    , decltype(_impl_.extract_keypoints106_){false}
    , decltype(_impl_.extract_attributes_){false}
    , decltype(_impl_.extract_feature_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FaceDetectionRequest::~FaceDetectionRequest() {
  // @@protoc_insertion_point(destructor:face.FaceDetectionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FaceDetectionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.image_.Destroy();
}

void FaceDetectionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FaceDetectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:face.FaceDetectionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_.ClearToEmpty();
  ::memset(&_impl_.extract_keypoints5_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.extract_feature_) -
      reinterpret_cast<char*>(&_impl_.extract_keypoints5_)) + sizeof(_impl_.extract_feature_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceDetectionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes image = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool extract_keypoints5 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.extract_keypoints5_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool extract_keypoints106 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.extract_keypoints106_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool extract_attributes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.extract_attributes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool extract_feature = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.extract_feature_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaceDetectionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:face.FaceDetectionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes image = 1;
  if (!this->_internal_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_image(), target);
  }

  // bool extract_keypoints5 = 2;
  if (this->_internal_extract_keypoints5() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(2, this->_internal_extract_keypoints5(), target);
  }

  // bool extract_keypoints106 = 3;
  if (this->_internal_extract_keypoints106() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_extract_keypoints106(), target);
  }

  // bool extract_attributes = 4;
  if (this->_internal_extract_attributes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_extract_attributes(), target);
  }

  // bool extract_feature = 5;
  if (this->_internal_extract_feature() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_extract_feature(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:face.FaceDetectionRequest)
  return target;
}

size_t FaceDetectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:face.FaceDetectionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image = 1;
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  // bool extract_keypoints5 = 2;
  if (this->_internal_extract_keypoints5() != 0) {
    total_size += 1 + 1;
  }

  // bool extract_keypoints106 = 3;
  if (this->_internal_extract_keypoints106() != 0) {
    total_size += 1 + 1;
  }

  // bool extract_attributes = 4;
  if (this->_internal_extract_attributes() != 0) {
    total_size += 1 + 1;
  }

  // bool extract_feature = 5;
  if (this->_internal_extract_feature() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaceDetectionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FaceDetectionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaceDetectionRequest::GetClassData() const { return &_class_data_; }


void FaceDetectionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FaceDetectionRequest*>(&to_msg);
  auto& from = static_cast<const FaceDetectionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:face.FaceDetectionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image().empty()) {
    _this->_internal_set_image(from._internal_image());
  }
  if (from._internal_extract_keypoints5() != 0) {
    _this->_internal_set_extract_keypoints5(from._internal_extract_keypoints5());
  }
  if (from._internal_extract_keypoints106() != 0) {
    _this->_internal_set_extract_keypoints106(from._internal_extract_keypoints106());
  }
  if (from._internal_extract_attributes() != 0) {
    _this->_internal_set_extract_attributes(from._internal_extract_attributes());
  }
  if (from._internal_extract_feature() != 0) {
    _this->_internal_set_extract_feature(from._internal_extract_feature());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaceDetectionRequest::CopyFrom(const FaceDetectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.FaceDetectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceDetectionRequest::IsInitialized() const {
  return true;
}

void FaceDetectionRequest::InternalSwap(FaceDetectionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.image_, lhs_arena,
      &other->_impl_.image_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FaceDetectionRequest, _impl_.extract_feature_)
      + sizeof(FaceDetectionRequest::_impl_.extract_feature_)
      - PROTOBUF_FIELD_OFFSET(FaceDetectionRequest, _impl_.extract_keypoints5_)>(
          reinterpret_cast<char*>(&_impl_.extract_keypoints5_),
          reinterpret_cast<char*>(&other->_impl_.extract_keypoints5_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceDetectionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_face_2eproto_getter, &descriptor_table_face_2eproto_once,
      file_level_metadata_face_2eproto[10]);
}

// ===================================================================

class FaceDetectionResponse::_Internal {
 public:
};

FaceDetectionResponse::FaceDetectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:face.FaceDetectionResponse)
}
FaceDetectionResponse::FaceDetectionResponse(const FaceDetectionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FaceDetectionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.faces_){from._impl_.faces_}
    , decltype(_impl_.error_msg_){}
    , decltype(_impl_.error_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_msg().empty()) {
    _this->_impl_.error_msg_.Set(from._internal_error_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.error_code_ = from._impl_.error_code_;
  // @@protoc_insertion_point(copy_constructor:face.FaceDetectionResponse)
}

inline void FaceDetectionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.faces_){arena}
    , decltype(_impl_.error_msg_){}
    , decltype(_impl_.error_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FaceDetectionResponse::~FaceDetectionResponse() {
  // @@protoc_insertion_point(destructor:face.FaceDetectionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FaceDetectionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.faces_.~RepeatedPtrField();
  _impl_.error_msg_.Destroy();
}

void FaceDetectionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FaceDetectionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:face.FaceDetectionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.faces_.Clear();
  _impl_.error_msg_.ClearToEmpty();
  _impl_.error_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceDetectionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .face.Face faces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_faces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "face.FaceDetectionResponse.error_msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaceDetectionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:face.FaceDetectionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .face.Face faces = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_faces_size()); i < n; i++) {
    const auto& repfield = this->_internal_faces(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 error_code = 2;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_error_code(), target);
  }

  // string error_msg = 3;
  if (!this->_internal_error_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_msg().data(), static_cast<int>(this->_internal_error_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "face.FaceDetectionResponse.error_msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:face.FaceDetectionResponse)
  return target;
}

size_t FaceDetectionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:face.FaceDetectionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .face.Face faces = 1;
  total_size += 1UL * this->_internal_faces_size();
  for (const auto& msg : this->_impl_.faces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_msg = 3;
  if (!this->_internal_error_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_msg());
  }

  // int32 error_code = 2;
  if (this->_internal_error_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaceDetectionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FaceDetectionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaceDetectionResponse::GetClassData() const { return &_class_data_; }


void FaceDetectionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FaceDetectionResponse*>(&to_msg);
  auto& from = static_cast<const FaceDetectionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:face.FaceDetectionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.faces_.MergeFrom(from._impl_.faces_);
  if (!from._internal_error_msg().empty()) {
    _this->_internal_set_error_msg(from._internal_error_msg());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaceDetectionResponse::CopyFrom(const FaceDetectionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.FaceDetectionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceDetectionResponse::IsInitialized() const {
  return true;
}

void FaceDetectionResponse::InternalSwap(FaceDetectionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.faces_.InternalSwap(&other->_impl_.faces_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_msg_, lhs_arena,
      &other->_impl_.error_msg_, rhs_arena
  );
  swap(_impl_.error_code_, other->_impl_.error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceDetectionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_face_2eproto_getter, &descriptor_table_face_2eproto_once,
      file_level_metadata_face_2eproto[11]);
}

// ===================================================================

class FaceRecognitionRequest::_Internal {
 public:
  static const ::face::FaceFeature& feature(const FaceRecognitionRequest* msg);
};

const ::face::FaceFeature&
FaceRecognitionRequest::_Internal::feature(const FaceRecognitionRequest* msg) {
  return *msg->_impl_.feature_;
}
FaceRecognitionRequest::FaceRecognitionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:face.FaceRecognitionRequest)
}
FaceRecognitionRequest::FaceRecognitionRequest(const FaceRecognitionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FaceRecognitionRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_){nullptr}
    , decltype(_impl_.top_n_){}
    , decltype(_impl_.threshold_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_feature()) {
    _this->_impl_.feature_ = new ::face::FaceFeature(*from._impl_.feature_);
  }
  ::memcpy(&_impl_.top_n_, &from._impl_.top_n_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.threshold_) -
    reinterpret_cast<char*>(&_impl_.top_n_)) + sizeof(_impl_.threshold_));
  // @@protoc_insertion_point(copy_constructor:face.FaceRecognitionRequest)
}

inline void FaceRecognitionRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.feature_){nullptr}
    , decltype(_impl_.top_n_){0}
    , decltype(_impl_.threshold_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

FaceRecognitionRequest::~FaceRecognitionRequest() {
  // @@protoc_insertion_point(destructor:face.FaceRecognitionRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FaceRecognitionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.feature_;
}

void FaceRecognitionRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FaceRecognitionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:face.FaceRecognitionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.feature_ != nullptr) {
    delete _impl_.feature_;
  }
  _impl_.feature_ = nullptr;
  ::memset(&_impl_.top_n_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.threshold_) -
      reinterpret_cast<char*>(&_impl_.top_n_)) + sizeof(_impl_.threshold_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceRecognitionRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .face.FaceFeature feature = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_feature(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 top_n = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.top_n_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float threshold = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaceRecognitionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:face.FaceRecognitionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .face.FaceFeature feature = 1;
  if (this->_internal_has_feature()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::feature(this),
        _Internal::feature(this).GetCachedSize(), target, stream);
  }

  // int32 top_n = 2;
  if (this->_internal_top_n() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_top_n(), target);
  }

  // float threshold = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_threshold = this->_internal_threshold();
  uint32_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:face.FaceRecognitionRequest)
  return target;
}

size_t FaceRecognitionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:face.FaceRecognitionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .face.FaceFeature feature = 1;
  if (this->_internal_has_feature()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.feature_);
  }

  // int32 top_n = 2;
  if (this->_internal_top_n() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_top_n());
  }

  // float threshold = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_threshold = this->_internal_threshold();
  uint32_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaceRecognitionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FaceRecognitionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaceRecognitionRequest::GetClassData() const { return &_class_data_; }


void FaceRecognitionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FaceRecognitionRequest*>(&to_msg);
  auto& from = static_cast<const FaceRecognitionRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:face.FaceRecognitionRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_feature()) {
    _this->_internal_mutable_feature()->::face::FaceFeature::MergeFrom(
        from._internal_feature());
  }
  if (from._internal_top_n() != 0) {
    _this->_internal_set_top_n(from._internal_top_n());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_threshold = from._internal_threshold();
  uint32_t raw_threshold;
  memcpy(&raw_threshold, &tmp_threshold, sizeof(tmp_threshold));
  if (raw_threshold != 0) {
    _this->_internal_set_threshold(from._internal_threshold());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaceRecognitionRequest::CopyFrom(const FaceRecognitionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.FaceRecognitionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceRecognitionRequest::IsInitialized() const {
  return true;
}

void FaceRecognitionRequest::InternalSwap(FaceRecognitionRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FaceRecognitionRequest, _impl_.threshold_)
      + sizeof(FaceRecognitionRequest::_impl_.threshold_)
      - PROTOBUF_FIELD_OFFSET(FaceRecognitionRequest, _impl_.feature_)>(
          reinterpret_cast<char*>(&_impl_.feature_),
          reinterpret_cast<char*>(&other->_impl_.feature_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceRecognitionRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_face_2eproto_getter, &descriptor_table_face_2eproto_once,
      file_level_metadata_face_2eproto[12]);
}

// ===================================================================

class FaceRecognitionResponse::_Internal {
 public:
};

FaceRecognitionResponse::FaceRecognitionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:face.FaceRecognitionResponse)
}
FaceRecognitionResponse::FaceRecognitionResponse(const FaceRecognitionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  FaceRecognitionResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){from._impl_.results_}
    , decltype(_impl_.error_msg_){}
    , decltype(_impl_.error_code_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.error_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error_msg().empty()) {
    _this->_impl_.error_msg_.Set(from._internal_error_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.error_code_ = from._impl_.error_code_;
  // @@protoc_insertion_point(copy_constructor:face.FaceRecognitionResponse)
}

inline void FaceRecognitionResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.results_){arena}
    , decltype(_impl_.error_msg_){}
    , decltype(_impl_.error_code_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.error_msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.error_msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FaceRecognitionResponse::~FaceRecognitionResponse() {
  // @@protoc_insertion_point(destructor:face.FaceRecognitionResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FaceRecognitionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.results_.~RepeatedPtrField();
  _impl_.error_msg_.Destroy();
}

void FaceRecognitionResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void FaceRecognitionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:face.FaceRecognitionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.results_.Clear();
  _impl_.error_msg_.ClearToEmpty();
  _impl_.error_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FaceRecognitionResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .face.FaceRecognitionResult results = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_results(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 error_code = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.error_code_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string error_msg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_error_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "face.FaceRecognitionResponse.error_msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FaceRecognitionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:face.FaceRecognitionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .face.FaceRecognitionResult results = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_results_size()); i < n; i++) {
    const auto& repfield = this->_internal_results(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int32 error_code = 2;
  if (this->_internal_error_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_error_code(), target);
  }

  // string error_msg = 3;
  if (!this->_internal_error_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error_msg().data(), static_cast<int>(this->_internal_error_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "face.FaceRecognitionResponse.error_msg");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_error_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:face.FaceRecognitionResponse)
  return target;
}

size_t FaceRecognitionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:face.FaceRecognitionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .face.FaceRecognitionResult results = 1;
  total_size += 1UL * this->_internal_results_size();
  for (const auto& msg : this->_impl_.results_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string error_msg = 3;
  if (!this->_internal_error_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error_msg());
  }

  // int32 error_code = 2;
  if (this->_internal_error_code() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_error_code());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FaceRecognitionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    FaceRecognitionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FaceRecognitionResponse::GetClassData() const { return &_class_data_; }


void FaceRecognitionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<FaceRecognitionResponse*>(&to_msg);
  auto& from = static_cast<const FaceRecognitionResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:face.FaceRecognitionResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.results_.MergeFrom(from._impl_.results_);
  if (!from._internal_error_msg().empty()) {
    _this->_internal_set_error_msg(from._internal_error_msg());
  }
  if (from._internal_error_code() != 0) {
    _this->_internal_set_error_code(from._internal_error_code());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FaceRecognitionResponse::CopyFrom(const FaceRecognitionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:face.FaceRecognitionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaceRecognitionResponse::IsInitialized() const {
  return true;
}

void FaceRecognitionResponse::InternalSwap(FaceRecognitionResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.results_.InternalSwap(&other->_impl_.results_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.error_msg_, lhs_arena,
      &other->_impl_.error_msg_, rhs_arena
  );
  swap(_impl_.error_code_, other->_impl_.error_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FaceRecognitionResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_face_2eproto_getter, &descriptor_table_face_2eproto_once,
      file_level_metadata_face_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace face
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::face::FaceBox*
Arena::CreateMaybeMessage< ::face::FaceBox >(Arena* arena) {
  return Arena::CreateMessageInternal< ::face::FaceBox >(arena);
}
template<> PROTOBUF_NOINLINE ::face::Point2D*
Arena::CreateMaybeMessage< ::face::Point2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::face::Point2D >(arena);
}
template<> PROTOBUF_NOINLINE ::face::FaceKeypoints5*
Arena::CreateMaybeMessage< ::face::FaceKeypoints5 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::face::FaceKeypoints5 >(arena);
}
template<> PROTOBUF_NOINLINE ::face::FaceKeypoints106*
Arena::CreateMaybeMessage< ::face::FaceKeypoints106 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::face::FaceKeypoints106 >(arena);
}
template<> PROTOBUF_NOINLINE ::face::FacePose*
Arena::CreateMaybeMessage< ::face::FacePose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::face::FacePose >(arena);
}
template<> PROTOBUF_NOINLINE ::face::FaceAttributes*
Arena::CreateMaybeMessage< ::face::FaceAttributes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::face::FaceAttributes >(arena);
}
template<> PROTOBUF_NOINLINE ::face::FaceFeature*
Arena::CreateMaybeMessage< ::face::FaceFeature >(Arena* arena) {
  return Arena::CreateMessageInternal< ::face::FaceFeature >(arena);
}
template<> PROTOBUF_NOINLINE ::face::FaceRecognitionResult*
Arena::CreateMaybeMessage< ::face::FaceRecognitionResult >(Arena* arena) {
  return Arena::CreateMessageInternal< ::face::FaceRecognitionResult >(arena);
}
template<> PROTOBUF_NOINLINE ::face::Face*
Arena::CreateMaybeMessage< ::face::Face >(Arena* arena) {
  return Arena::CreateMessageInternal< ::face::Face >(arena);
}
template<> PROTOBUF_NOINLINE ::face::FaceRecord*
Arena::CreateMaybeMessage< ::face::FaceRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::face::FaceRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::face::FaceDetectionRequest*
Arena::CreateMaybeMessage< ::face::FaceDetectionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::face::FaceDetectionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::face::FaceDetectionResponse*
Arena::CreateMaybeMessage< ::face::FaceDetectionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::face::FaceDetectionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::face::FaceRecognitionRequest*
Arena::CreateMaybeMessage< ::face::FaceRecognitionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::face::FaceRecognitionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::face::FaceRecognitionResponse*
Arena::CreateMaybeMessage< ::face::FaceRecognitionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::face::FaceRecognitionResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
